#!/usr/bin/env python3

import os, sys, glob, errno
import json
import re

# This script will scan a project for c++ source files,
# and create a compilation database based on .cproj file.
# Then it will add the project to rtags.
# On the other hand, YCM will pick up .cproj for its job.

# See ~/.vim/ycm_extra_conf.py for reference.

# Current working directory will be considered project root
curdir = os.path.abspath(os.getcwd())

outdir = ".cproj.out"
try:
    os.mkdir(outdir)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise

def IsComment(s):
    return not s or s[0] == '#'

def LoadCflags():
    with open(".cproj/cflags", "r") as f:
        return [s for s in (l.strip() for l in f.readlines()) if not IsComment(s)]

def FixPaths(opt):
    # Ensure that relative include directories are converted to absolute ones
    if opt.startswith('-I') and opt[2] != '/':
        return '-I' + os.path.join(curdir, opt[2:])
    return opt


def CreateCompileDatabaseForRtags():
    data = LoadCflags()

    # Create clang compilation command
    command = "/usr/bin/clang++ " + " ".join([FixPaths(s.strip()) for s in data])

    # Compilation database
    comp = []

    # Find all c++ files
    with open('.cproj/files', 'r') as f:
        # The format should be "directory  regex"
        for l in f.readlines():
            line = l.strip()
            # Skip empty lines and comments
            if IsComment(line):
                continue
            d, rx = line.split()
            for root, dirs, files in os.walk(d):
                for f in files:
                    if not re.search(rx, f, re.I):
                        continue
                    print(os.path.join(root, f))
                    fabs = os.path.abspath(os.path.join(root, f))
                    entry = {}
                    entry["directory"] = curdir
                    entry["command"] = command + " -o " + fabs + ".o " + fabs
                    entry["file"] = fabs
                    comp.append(entry)

    # Dump compilation database into a JSON file
    with open(os.path.join(outdir, "compile_commands.json"), "w") as f:
        f.write(json.dumps(comp, indent=4))

    # If rdm (from rtags) is socket-activated, this should succeed
    os.system('rc --load-compile-commands=' + outdir + ' --project-root=.')


def LoadIncludes():
    with open(os.path.join(os.path.expanduser("~"), ".vim/includes.txt"), "r") as f:
        return [s for s in (l.strip() for l in f.readlines())]

def CreateClangComplete():
    with open(".clang_complete", "w") as f:
        f.write("\n".join(['-isystem'+s for s in LoadIncludes()]))
        f.write("\n")
        f.write("\n".join(LoadCflags()))
        f.write("\n")

def DeployYcmExtraConf():
    os.system("cp ~/.vim/.ycm_extra_conf.py .")

CreateCompileDatabaseForRtags()
CreateClangComplete()
DeployYcmExtraConf()
